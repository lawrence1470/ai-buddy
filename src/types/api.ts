/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üè• Get comprehensive system health status
         * @description Returns detailed health information including system status, uptime, database connectivity, AI service availability, and performance metrics.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/personality/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üß† Get comprehensive personality insights for a user
         * @description Retrieves detailed MBTI personality analysis including current personality type classification, statistical confidence scores, individual trait breakdowns, and conversation pattern insights.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique user identifier */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Personality profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PersonalityProfile"];
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * üí¨ Process a conversation session for personality analysis
         * @description Analyzes conversation transcripts to extract personality indicators, update MBTI trait scores using Bayesian inference, perform sentiment analysis, and generate conversation insights.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SessionRequest"];
                };
            };
            responses: {
                /** @description Session processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionProcessResult"];
                    };
                };
                /** @description Invalid session data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Rate limit exceeded */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthStatus: {
            /** @example true */
            ai_service_available?: boolean;
            /** @example true */
            database_connected?: boolean;
            /** @example healthy */
            status?: string;
            /** @example 2024-01-15T14:30:00Z */
            timestamp?: string;
            /** @example 86400 */
            uptime_seconds?: number;
            /** @example 1.0.0 */
            version?: string;
        };
        PersonalityProfile: {
            /** @example 0.82 */
            confidence_score?: number;
            /** @example {
             *       "communication_style": "Direct"
             *     } */
            conversation_insights?: Record<string, never>;
            /** @example 2024-01-15T14:35:22Z */
            last_updated?: string;
            /** @example ENTJ */
            mbti_type?: string;
            /** @example 15 */
            sessions_analyzed?: number;
            /** @example {
             *       "extraversion": 0.75
             *     } */
            trait_scores?: Record<string, never>;
            /** @example The Commander */
            type_description?: string;
            /** @example user-12345-abcdef */
            user_id?: string;
        };
        SessionProcessResult: {
            /** @example {
             *       "mbti_type": "ENTJ"
             *     } */
            personality_update?: Record<string, never>;
            /** @example 1250 */
            processing_time_ms?: number;
            /** @example session-20240115-143000 */
            session_id?: string;
            /** @example {
             *       "total_messages": 15
             *     } */
            session_insights?: Record<string, never>;
            /** @example true */
            success?: boolean;
            /** @example user-12345-abcdef */
            user_id?: string;
        };
        SessionRequest: {
            /** @example session-20240115-143000 */
            session_id: string;
            /** @example {
             *       "duration_minutes": 25
             *     } */
            session_metadata?: Record<string, never>;
            transcript: components["schemas"]["TranscriptMessage"][];
            /** @example user-12345-abcdef */
            user_id: string;
        };
        TranscriptMessage: {
            /** @example I love planning ahead and organizing my schedule */
            content: string;
            /** @example [
             *       "confident"
             *     ] */
            emotions?: string[];
            /** @example 0.75 */
            sentiment_score?: number;
            /**
             * @example User
             * @enum {string}
             */
            speaker: "User" | "Assistant" | "System";
            /** @example 2024-01-15T14:30:00Z */
            timestamp: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
