/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ai-buddies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ü§ñ Get Available AI Buddies
         * @description Retrieve a list of all available AI buddies with their unique voices, personalities, and characteristics. Each buddy has distinct conversation styles and specialties.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description AI buddies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AIBuddiesList"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-buddies/{buddy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üé≠ Get AI Buddy Details
         * @description Get detailed information about a specific AI buddy including voice samples, personality traits, conversation topics, and specialties.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description AI buddy identifier (oliver, luna, zara)
                     * @example oliver
                     */
                    buddy_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description AI buddy details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AIBuddyDetails"];
                    };
                };
                /** @description AI buddy not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * üí¨ AI Chat Conversation
         * @description Send a message to the AI and receive a conversational response. Supports both text and voice interactions with conversation context for multi-turn conversations. You can specify a buddy_id to get responses in a specific AI buddy's voice and personality.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatRequest"];
                };
            };
            responses: {
                /** @description AI response generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Invalid request - missing text/message */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üè• Get comprehensive system health status
         * @description Returns detailed health information including system status, uptime, database connectivity, AI service availability, and performance metrics.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/personality/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üß† Get comprehensive personality insights for a user
         * @description Retrieves detailed MBTI personality analysis including current personality type classification, statistical confidence scores, individual trait breakdowns, and conversation pattern insights.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique user identifier */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Personality profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PersonalityProfile"];
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * üí¨ Process a conversation session for personality analysis
         * @description Analyzes conversation transcripts to extract personality indicators, update MBTI trait scores using Bayesian inference, perform sentiment analysis, and generate conversation insights.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SessionRequest"];
                };
            };
            responses: {
                /** @description Session processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionProcessResult"];
                    };
                };
                /** @description Invalid session data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Rate limit exceeded */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üìö Get user's sessions with summaries
         * @description Retrieve recent sessions for a user with AI-generated summaries.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of sessions to retrieve */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description User identifier */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sessions retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionSummary"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üìã Get session details with AI summary
         * @description Retrieve a specific session including AI-generated summary and sentiment analysis.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Session identifier */
                    session_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Session retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionDetails"];
                    };
                };
                /** @description Session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/select-buddy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ‚ú® Select Preferred AI Buddy
         * @description Set the user's preferred AI buddy. This selection will persist and be used as the default buddy for future conversations if no specific buddy is requested.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User identifier
                     * @example user_2ybVqC3I3Uchb1EL8UB0kgMNRG3
                     */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SelectBuddyRequest"];
                };
            };
            responses: {
                /** @description AI buddy selected successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SelectBuddyResponse"];
                    };
                };
                /** @description Invalid buddy_id or missing required fields */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/selected-buddy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * üîç Get User's Selected Buddy
         * @description Retrieve the user's currently selected preferred AI buddy. Returns null if no buddy has been selected.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User identifier
                     * @example user_2ybVqC3I3Uchb1EL8UB0kgMNRG3
                     */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Selected buddy retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SelectedBuddyResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AIBuddiesList: {
            ai_buddies?: components["schemas"]["AIBuddy"][];
            /** @example true */
            success?: boolean;
            /** @example 3 */
            total_buddies?: number;
            /** @example Use the buddy ID in chat requests to get responses in their unique voice and personality */
            usage_note?: string;
        };
        AIBuddy: {
            avatar?: {
                /** @example [
                 *       "#2C3E50",
                 *       "#34495E"
                 *     ] */
                color_scheme?: string[];
                /** @example üé© */
                emoji?: string;
            };
            color_schema?: {
                /** @example #E74C3C */
                accent?: string;
                /** @example #ECF0F1 */
                background?: string;
                /** @example Professional BBC-inspired color scheme with deep blues and authoritative reds */
                description?: string;
                /** @example linear-gradient(135deg, #2C3E50 0%, #34495E 100%) */
                gradient?: string;
                /** @example #2C3E50 */
                primary?: string;
                /** @example #34495E */
                secondary?: string;
                /** @example #FFFFFF */
                text?: string;
                /** @example professional */
                theme?: string;
            };
            /** @example üé© Oliver - The British Gentleman */
            display_name?: string;
            /** @example oliver */
            id?: string;
            /** @example Oliver */
            name?: string;
            personality?: {
                /** @example Thoughtful and eloquent */
                conversation_style?: string;
                /** @example A charming British gentleman with a passion for literature */
                description?: string;
                /** @example ENFJ */
                mbti_type?: string;
                /** @example [
                 *       "literature",
                 *       "philosophy"
                 *     ] */
                specialties?: string[];
                /** @example [
                 *       "empathetic",
                 *       "articulate"
                 *     ] */
                traits?: string[];
            };
            /** @example [
             *       "I say, that's rather fascinating"
             *     ] */
            sample_responses?: string[];
            voice?: {
                /** @example british */
                accent?: string;
                /** @example Refined British accent with articulate pronunciation */
                description?: string;
                /** @example male */
                gender?: string;
                /** @example medium-low */
                pitch?: string;
                /** @example measured */
                speaking_rate?: string;
                /** @example sophisticated */
                tone?: string;
            };
        };
        AIBuddyDetails: {
            buddy?: {
                color_schema?: {
                    /** @example #E74C3C */
                    accent?: string;
                    /** @example #ECF0F1 */
                    background?: string;
                    /** @example Professional BBC-inspired color scheme */
                    description?: string;
                    /** @example linear-gradient(135deg, #2C3E50 0%, #34495E 100%) */
                    gradient?: string;
                    /** @example #2C3E50 */
                    primary?: string;
                    /** @example #34495E */
                    secondary?: string;
                    /** @example #FFFFFF */
                    text?: string;
                    /** @example professional */
                    theme?: string;
                };
                /** @example 2024-01-15T10:00:00Z */
                created_at?: string;
                /** @example üé© Oliver - The British Gentleman */
                display_name?: string;
                /** @example oliver */
                id?: string;
                /** @example 2024-01-15T14:30:00Z */
                last_updated?: string;
                /** @example Oliver */
                name?: string;
                personality?: {
                    /** @example [
                     *       "Deep conversations"
                     *     ] */
                    best_for?: string[];
                    /** @example [
                     *       "Classical literature"
                     *     ] */
                    conversation_topics?: string[];
                    /** @example The Protagonist - A natural leader */
                    full_description?: string;
                    /** @example ENFJ */
                    mbti_type?: string;
                    /** @example [
                     *       "Deep listening"
                     *     ] */
                    strengths?: string[];
                };
                voice?: {
                    /** @example british */
                    accent?: string;
                    /** @example male */
                    gender?: string;
                    /** @example sophisticated */
                    tone?: string;
                    /** @example [
                     *       "Good evening, how may I assist?"
                     *     ] */
                    voice_samples?: string[];
                };
            };
            /** @example true */
            success?: boolean;
        };
        ChatRequest: {
            /**
             * @description AI buddy identifier for personality-specific responses
             * @example oliver
             * @enum {string}
             */
            buddy_id?: "oliver" | "luna" | "zara";
            /**
             * @description Previous conversation messages for context
             * @example [
             *       {
             *         "isUser": true,
             *         "text": "What's the weather like?"
             *       },
             *       {
             *         "isUser": false,
             *         "text": "I don't have access to real-time weather data, but I'd be happy to help you find weather information!"
             *       }
             *     ]
             */
            conversation_context?: {
                /** @example true */
                isUser?: boolean;
                /** @example What's the weather like? */
                text?: string;
                /** @example 2024-01-15T14:30:00Z */
                timestamp?: string;
            }[];
            /**
             * @description Whether this message came from voice input
             * @example false
             */
            is_voice?: boolean;
            /**
             * @description The user's message to send to the AI
             * @example Hello! How are you doing today?
             */
            text: string;
            /**
             * @description Optional user identifier for personalization
             * @example user-12345-abcdef
             */
            user_id?: string;
        };
        ChatResponse: {
            /**
             * @description Error message if success is false
             * @example API rate limit exceeded
             */
            error?: string;
            /**
             * @description AI model used for the response
             * @example gpt-3.5-turbo
             */
            model?: string;
            /**
             * @description The AI's response message
             * @example Hello! I'm doing well, thank you for asking. How are you doing today?
             */
            response?: string;
            /**
             * @description Whether the request was successful
             * @example true
             */
            success?: boolean;
            /**
             * @description When the response was generated
             * @example 2024-01-15T14:30:00Z
             */
            timestamp?: string;
            /**
             * @description Number of tokens consumed by the request
             * @example 25
             */
            tokens_used?: number;
        };
        HealthStatus: {
            /** @example true */
            ai_service_available?: boolean;
            /** @example true */
            database_connected?: boolean;
            /** @example healthy */
            status?: string;
            /** @example 2024-01-15T14:30:00Z */
            timestamp?: string;
            /** @example 86400 */
            uptime_seconds?: number;
            /** @example 1.0.0 */
            version?: string;
        };
        PersonalityProfile: {
            /** @example 0.82 */
            confidence_score?: number;
            /** @example {
             *       "communication_style": "Direct"
             *     } */
            conversation_insights?: Record<string, never>;
            /** @example 2024-01-15T14:35:22Z */
            last_updated?: string;
            /** @example ENTJ */
            mbti_type?: string;
            /** @example 15 */
            sessions_analyzed?: number;
            /** @example {
             *       "extraversion": 0.75
             *     } */
            trait_scores?: Record<string, never>;
            /** @example The Commander */
            type_description?: string;
            /** @example user-12345-abcdef */
            user_id?: string;
        };
        SelectBuddyRequest: {
            /**
             * @description The AI buddy ID to select as preferred
             * @example oliver
             * @enum {string}
             */
            buddy_id: "oliver" | "luna" | "zara" | "maya" | "alex" | "sam";
        };
        SelectBuddyResponse: {
            /** @example AI buddy oliver selected for user user_2ybVqC3I3Uchb1EL8UB0kgMNRG3 */
            message?: string;
            /** @example oliver */
            selected_buddy?: string;
            /** @example true */
            success?: boolean;
            /** @example 2024-01-15T14:30:00Z */
            timestamp?: string;
        };
        SelectedBuddyResponse: {
            buddy_details?: {
                /** @example Oliver - The British Gentleman */
                display_name?: string;
                /** @example oliver */
                id?: string;
                /** @example Oliver */
                name?: string;
            };
            /** @example false */
            is_default?: boolean;
            /** @example 2024-01-15T14:30:00Z */
            last_updated?: string;
            /** @example oliver */
            selected_buddy?: string;
            /** @example true */
            success?: boolean;
            /** @example 2024-01-15T14:30:00Z */
            timestamp?: string;
        };
        SessionDetails: {
            /** @example 2024-01-15T14:30:00Z */
            created_at?: string;
            /** @example 750 */
            duration_seconds?: number;
            /** @example 2024-01-15T14:42:30Z */
            ended_at?: string;
            /** @example 18 */
            message_count?: number;
            /** @example {
             *       "dominant_emotion": "confident",
             *       "overall_sentiment": 0.68
             *     } */
            sentiment_summary?: Record<string, never>;
            /** @example session-20240115-143000 */
            session_id?: string;
            /** @example User discussed career planning and leadership preferences, demonstrating strategic thinking. */
            topic_summary?: string;
            transcript?: components["schemas"]["TranscriptMessage"][];
            /** @example user-12345-abcdef */
            user_id?: string;
        };
        SessionProcessResult: {
            /** @example {
             *       "mbti_type": "ENTJ"
             *     } */
            personality_update?: Record<string, never>;
            /** @example 1250 */
            processing_time_ms?: number;
            /** @example {
             *       "confidence": 0.85,
             *       "emotions": [
             *         "confident",
             *         "analytical"
             *       ],
             *       "intensity": 7,
             *       "overall_sentiment": 0.65,
             *       "stability": "stable",
             *       "tone": "positive"
             *     } */
            sentiment_analysis?: Record<string, never>;
            /** @example session-20240115-143000 */
            session_id?: string;
            /** @example {
             *       "avg_sentiment": 0.65,
             *       "total_messages": 15
             *     } */
            session_insights?: Record<string, never>;
            /** @example User discussed career goals and decision-making preferences, showing strong analytical thinking and future-focused planning. */
            session_summary?: string;
            /** @example true */
            success?: boolean;
            /** @example user-12345-abcdef */
            user_id?: string;
        };
        SessionRequest: {
            /** @example session-20240115-143000 */
            session_id: string;
            /** @example {
             *       "duration_minutes": 25
             *     } */
            session_metadata?: Record<string, never>;
            transcript: components["schemas"]["TranscriptMessage"][];
            /** @example user-12345-abcdef */
            user_id: string;
        };
        SessionSummary: {
            /** @example 2024-01-15T14:30:00Z */
            created_at?: string;
            /** @example 600 */
            duration_seconds?: number;
            /** @example 2024-01-15T14:42:30Z */
            ended_at?: string;
            /** @example 12 */
            message_count?: number;
            /** @example {
             *       "overall_sentiment": 0.72,
             *       "tone": "positive"
             *     } */
            sentiment_summary?: Record<string, never>;
            /** @example session-20240115-143000 */
            session_id?: string;
            /** @example Discussion about work-life balance and decision-making approaches. */
            topic_summary?: string;
        };
        TranscriptMessage: {
            /** @example I love planning ahead and organizing my schedule */
            content: string;
            /** @example [
             *       "confident"
             *     ] */
            emotions?: string[];
            /** @example 0.75 */
            sentiment_score?: number;
            /**
             * @example User
             * @enum {string}
             */
            speaker: "User" | "Assistant" | "System";
            /** @example 2024-01-15T14:30:00Z */
            timestamp: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
